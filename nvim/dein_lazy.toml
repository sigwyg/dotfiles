# vimproc
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_mac()
    let cmd = 'make -f make_mac.mak'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_post_source = '''
    call denite#custom#option('default', 'prompt', '>')

    " denite/insert モードのときは，C- で移動できるようにする
    call denite#custom#map('insert', "<C-n>", '<denite:move_to_next_line>')
    call denite#custom#map('insert', "<C-p>", '<denite:move_to_previous_line>')

    " tabopen や vsplit のキーバインドを割り当て
    call denite#custom#map('insert', "<C-t>", '<denite:do_action:tabopen>')
    call denite#custom#map('insert', "<C-v>", '<denite:do_action:vsplit>')
    call denite#custom#map('normal', "v", '<denite:do_action:vsplit>')

    " jj で denite/insert を抜けるようにする
    call denite#custom#map('insert', 'jj', '<denite:enter_mode:normal>')

    " customize ignore globs
    call denite#custom#source('file_rec', 'matchers', ['matcher_fuzzy','matcher_ignore_globs'])
    call denite#custom#filter('matcher_ignore_globs', 'ignore_globs', [
        \ '.git/', 'node_modules/',
        \ 'images/', 'img/', 'fonts/', 'font/'
        \ ])
'''

[[plugins]]
repo = 'Shougo/unite.vim.git'
hook_post_source = '''
    let g:unite_winheight = 10
    let g:unite_source_history_yank_enable = 1
    let g:unite_source_history_yank_limit = 100

    " The prefix key.
    nnoremap ff :<C-u>Unite file            -buffer-name=files -no-quit<CR>
    nnoremap fu :<C-u>Unite buffer file_mru -buffer-name=mru -no-quit<CR>
    nnoremap fb :<C-u>Unite bookmark        -buffer-name=bookmark<CR>
    nnoremap fl :<C-u>Unite line            -buffer-name=line<CR>
    nnoremap fg :<C-u>Unite grep            -buffer-name=grep -no-quit -auto-preview<CR>
    nnoremap f1 :<C-u>Unite file            -buffer-name=files -input=/Users/sigwyg/Dropbox/memo/<CR>

    autocmd MyAutoCmd FileType unite call s:unite_my_settings()
    function! s:unite_my_settings()"
        " Overwrite settings.
        imap <buffer> <C-g> <Plug>(unite_input_directory)
    endfunction"
'''

[[plugins]]
repo = 'Shougo/vimfiler.git'
hook_post_source = '''
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_split_command = 'vertical rightbelow vsplit'
    let g:vimfiler_min_filename_width = 20
    let g:vimfiler_safe_mode_by_default = 0

    " Overwrite settings.
    autocmd MyAutoCmd FileType vimfiler call s:vimfiler_my_settings()
    function! s:vimfiler_my_settings()"
        nmap <buffer> <C-l> <C-w>l
        nmap <buffer> <C-j> <C-w>j
        nmap <buffer> R <Plug>(vimfiler_redraw_screen)
    endfunction"
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
on_i = 1
hook_source = '''
    let g:neosnippet#snippets_directory='~/.vim/snippets'
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#expand_word_boundary = 1
    " Plugin key-mappings.
    imap <C-k>  <Plug>(neosnippet_expand_or_jump)
    smap <C-k>  <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>  <Plug>(neosnippet_expand_target)

    " For conceal markers.
    if has('conceal')
        set conceallevel=2 concealcursor=niv
    endif
'''

[[plugins]]
repo = 'thinca/vim-openbuf.git'

# Text
[[plugins]]
repo = 'h1mesuke/vim-alignta.git'

[[plugins]]
repo = 'thinca/vim-template.git'

[[plugins]]
repo = 'tpope/vim-repeat.git'

[[plugins]]
repo = 'https://github.com/kana/vim-operator-user.git'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)a
  nmap <silent>sd <Plug>(operator-surround-delete)a
  nmap <silent>sr <Plug>(operator-surround-replace)a
  nmap <silent>sc <Plug>(operator-surround-replace)a
'''

# Display
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides.git'
hook_post_source = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_indent_levels = 30
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_space_guides = 1

    let g:indent_guides_auto_colors = 0
    let g:indent_guides_color_change_percent = 20

    augroup indentGuide
        autocmd! indentGuide
        autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=#191919 ctermbg=6
        autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#303030 ctermbg=0*
    augroup END
'''

[[plugins]]
repo = 'Lokaltog/vim-easymotion.git'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

# Grep
[[plugins]]
repo = 'thinca/vim-qfreplace.git'

[[plugins]]
repo = 'h1mesuke/unite-outline.git'


# Syntax
[[plugins]]
repo = 'othree/html5.vim.git'
on_ft = 'html'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim.git'

[[plugins]]
repo = 'hail2u/vim-css3-syntax.git'
on_ft = 'css'

[[plugins]]
repo = 'hallison/vim-markdown.git'
on_ft = 'markdown'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'jsx'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'


# Develop
[[plugins]]
repo = 'sjl/gundo.vim.git'

[[plugins]]
repo = 'thinca/vim-quickrun.git'

[[plugins]]
repo = 'thinca/vim-ref.git'

[[plugins]]
repo = 'scrooloose/syntastic.git'
hook_post_source = '''
    let g:syntastic_enable_sign = 1
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0
    let g:syntastic_css_checkers = ['stylelint']
    let g:syntastic_scss_checkers = ['stylelint']
    let g:syntastic_javascript_checker = 'eslint'
    let g:syntastic_mode_map = { 'mode': 'active',
                                \ 'active_filetypes': ['scss', 'js', 'jsx'],
                                \ 'passive_filetypes': ['html','xhtml'] }

    autocmd BufEnter *.scss let b:syntastic_scss_stylelint_exec = nrun#Which('stylelint')
'''

[[plugins]]
repo = 'mtscout6/syntastic-local-eslint.vim'

[[plugins]]
repo = 'jaawerth/nrun.vim.git'
