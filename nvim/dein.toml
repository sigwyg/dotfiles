[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/unite.vim.git'

[[plugins]]
repo = 'Shougo/vimfiler.git'
hook_add = '''
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_split_command = 'vertical rightbelow vsplit'
    let g:vimfiler_min_filename_width = 20
    let g:vimfiler_safe_mode_by_default = 0

    " Overwrite settings.
    autocmd MyAutoCmd FileType vimfiler call s:vimfiler_my_settings()
    function! s:vimfiler_my_settings()"
        nmap <buffer> <C-l> <C-w>l
        nmap <buffer> <C-j> <C-w>j
        nmap <buffer> R <Plug>(vimfiler_redraw_screen)
    endfunction"
'''

[[plugins]]
repo = 'h1mesuke/vim-alignta.git'

[[plugins]]
repo = 'thinca/vim-template.git'

# Display
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides.git'
hook_post_source = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_indent_levels = 30
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_space_guides = 1

    let g:indent_guides_auto_colors = 0
    let g:indent_guides_color_change_percent = 20

    augroup indentGuide
        autocmd! indentGuide
        autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=#191919 ctermbg=6
        autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#303030 ctermbg=0*
    augroup END
'''

# Grep
[[plugins]]
repo = 'thinca/vim-qfreplace.git'

# Colorscheme
[[plugins]]
repo = 'nanotech/jellybeans.vim'

# airline
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['fugitive']
hook_post_source = '''
    let g:airline_theme = 'base16'
    let g:airline_powerline_fonts = 0
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_symbols.space = "\ua0"
    let g:airline_skip_empty_sections = 1
'''

# Git
[[plugins]]
repo = 'https://github.com/tpope/vim-fugitive.git'

[[plugins]]
repo = 'lambdalisue/gina.vim'

# terminal
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
    nnoremap <silent> ,th :call neoterm#close()<cr>
    nnoremap <silent> ,tl :call neoterm#clear()<cr>
    nnoremap <silent> ,tc :call neoterm#kill()<cr>
    nnoremap <silent> ,rc :TREPLSendFile<cr>
    nnoremap <silent> ,rl :TREPLSendLine<cr>
    vnoremap <silent> ,rl :TREPLSendSelection<cr>
'''

# Operator
[[plugins]]
repo = 'tpope/vim-repeat.git'

[[plugins]]
repo = 'tpope/vim-surround.git'

# tags
[[plugins]]
repo = 'jsfaint/gen_tags.vim.git'
hook_source = '''
    let g:gen_tags#ctags_auto_gen = 1
    let g:gen_tags#gtags_auto_gen = 1
'''

# Develop
[[plugins]]
repo = 'sjl/gundo.vim.git'

[[plugins]]
repo = 'thinca/vim-quickrun.git'

[[plugins]]
repo = 'thinca/vim-ref.git'

[[plugins]]
repo = 'jaawerth/nrun.vim.git'

[[plugins]]
repo = 'Lokaltog/vim-easymotion.git'

# Syntax Change
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_source = '''
   " let g:precious_enable_switchers = {
   " \   "vue-template" : { "setfiletype" : 0 },
   " \}
'''

# Text
[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
    " refer: https://github.com/osyo-manga/vim-precious/issues/17
    let g:context_filetype#filetypes = {
    \   "vue" : [
    \       {
    \           'start': '<template\%( [^>]*\)\? \%(lang="\%(\(\h\w*\)\)"\)\%( [^>]*\)\?>',
    \           'end': '</template>',
    \           'filetype': '\1',
    \       },
    \       {
    \           'start': '<template\%( [^>]*\)\?>',
    \           'end': '</template>',
    \           'filetype': 'vue',
    \       },
    \       {
    \           'start': '<script\%( [^>]*\)\? \%(ts\|lang="\%(ts\|typescript\)"\)\%( [^>]*\)\?>',
    \           'end': '</script>',
    \           'filetype': 'typescript',
    \       },
    \       {
    \           'start': '<script\%( [^>]*\)\? \%(lang="\%(\(\h\w*\)\)"\)\%( [^>]*\)\?>',
    \           'end': '</script>',
    \           'filetype': '\1',
    \       },
    \       {
    \           'start': '<script\%( [^>]*\)\?>',
    \           'end': '</script>',
    \           'filetype': 'javascript',
    \       },
    \       {
    \           'start': '<style\%( [^>]*\)\? \%(lang="\%(\(\h\w*\)\)"\)\%( [^>]*\)\?>',
    \           'end': '</style>',
    \           'filetype': '\1',
    \       },
    \       {
    \           'start': '<style\%( [^>]*\)\?>',
    \           'end': '</style>',
    \           'filetype': 'css',
    \       },
    \       {
    \           'start': '<\(\h\w*\)>',
    \           'end': '</\1>',
    \           'filetype': 'vue',
    \       },
    \       {
    \           'start': '<\(\h\w*\) \%(lang="\%(\(\h\w*\)\)"\)\%( [^>]*\)\?>',
    \           'end': '</\1>',
    \           'filetype': 'vue',
    \       },
    \   ]
    \}
'''

# Syntax
[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

[[plugins]]
repo = 'othree/html5.vim.git'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim.git'

[[plugins]]
repo = 'hail2u/vim-css3-syntax.git'

[[plugins]]
repo = 'hallison/vim-markdown.git'

[[plugins]]
repo = 'slim-template/vim-slim'

[[plugins]]
repo = 'digitaltoad/vim-pug'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

# Auto Linter&Fixer
[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
    let g:ale_disable_lsp = 0
    let g:ale_fix_on_save = 1
    let g:ale_javascript_prettier_use_local_config = 1
    let g:ale_sign_column_always = 1
    let g:ale_echo_msg_format = 'ALE:[%linter%] %code: %%s'
    let g:ale_sign_error = '💣'
    let g:ale_sign_warning = '🚩'
    let g:ale_linters_explicit = 1 " 必要なlinterのみ有効化したいため

    " mapping
    nmap <silent> [, <Plug>(ale_previous_wrap)
    nmap <silent> ]. <Plug>(ale_next_wrap)

    "有効なLinterを設定
    " - .vue(javascript)でtsserverが動いちゃうのでシンプルにしておく
    let g:ale_linters = {
    \    'typescript': ['tsserver'],
    \    'javascript': ['eslint'],
    \    'css': ['stylelint'],
    \    'vue': ['eslint']
    \}

    " format
    let g:ale_fixers = {
    \    'javascript': ['prettier', 'eslint'],
    \    'typescript': ['prettier'],
    \    'css': ['prettier', 'stylelint'],
    \    'scss': ['prettier', 'stylelint'],
    \    '*': ['remove_trailing_lines', 'trim_whitespace']
    \}

    let g:ale_linter_aliases = {
    \    'jsx': ['css', 'html'],
    \    'vue': ['vue', 'css', 'javascript']
    \}

    " for jsx
    augroup FiletypeGroup
        autocmd!
        au BufNewFile,BufRead *.jsx set filetype=css.javascript.jsx
    augroup END
    "let g:ale_jsx_stylelint_options = '--config=.stylelintrc-jsx.json'
'''

[[plugins]]
repo = 'tbodt/deoplete-tabnine'
build = './install.sh'
