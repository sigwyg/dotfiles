[[plugins]]
repo = 'Shougo/vimfiler.git'
hook_add = '''
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_split_command = 'vertical rightbelow vsplit'
    let g:vimfiler_min_filename_width = 20
    let g:vimfiler_safe_mode_by_default = 0

    " Overwrite settings.
    autocmd MyAutoCmd FileType vimfiler call s:vimfiler_my_settings()
    function! s:vimfiler_my_settings()"
        nmap <buffer> <C-l> <C-w>l
        nmap <buffer> <C-j> <C-w>j
        nmap <buffer> R <Plug>(vimfiler_redraw_screen)
    endfunction"
'''

[[plugins]]
repo = 'h1mesuke/vim-alignta.git'

[[plugins]]
repo = 'thinca/vim-template.git'

# Display
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides.git'
hook_post_source = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_indent_levels = 30
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_space_guides = 1

    let g:indent_guides_auto_colors = 0
    let g:indent_guides_color_change_percent = 20

    augroup indentGuide
        autocmd! indentGuide
        autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=#191919 ctermbg=6
        autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#303030 ctermbg=0*
    augroup END
'''

[[plugins]]
repo = 'thinca/vim-qfreplace.git'

# Colorscheme
[[plugins]]
repo = 'nanotech/jellybeans.vim'

# airline
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['fugitive']
hook_post_source = '''
    let g:airline_theme = 'base16'
    let g:airline_powerline_fonts = 0
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_symbols.space = "\ua0"
    let g:airline_skip_empty_sections = 1
'''

# Git
[[plugins]]
repo = 'https://github.com/tpope/vim-fugitive.git'

[[plugins]]
repo = 'lambdalisue/gina.vim'

# terminal
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
    nnoremap <silent> ,th :call neoterm#close()<cr>
    nnoremap <silent> ,tl :call neoterm#clear()<cr>
    nnoremap <silent> ,tc :call neoterm#kill()<cr>
    nnoremap <silent> ,rc :TREPLSendFile<cr>
    nnoremap <silent> ,rl :TREPLSendLine<cr>
    vnoremap <silent> ,rl :TREPLSendSelection<cr>
'''

# Operator
[[plugins]]
repo = 'tpope/vim-repeat.git'

[[plugins]]
repo = 'tpope/vim-surround.git'

# tags
[[plugins]]
repo = 'jsfaint/gen_tags.vim.git'
hook_source = '''
    let g:gen_tags#ctags_auto_gen = 1
    let g:gen_tags#gtags_auto_gen = 1
'''

# Develop
[[plugins]]
repo = 'sjl/gundo.vim.git'

[[plugins]]
repo = 'thinca/vim-quickrun.git'

[[plugins]]
repo = 'thinca/vim-ref.git'

[[plugins]]
repo = 'jaawerth/nrun.vim.git'

[[plugins]]
repo = 'Lokaltog/vim-easymotion.git'

# Syntax
[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

[[plugins]]
repo = 'othree/html5.vim.git'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim.git'

[[plugins]]
repo = 'hail2u/vim-css3-syntax.git'

[[plugins]]
repo = 'hallison/vim-markdown.git'

[[plugins]]
repo = 'slim-template/vim-slim'

[[plugins]]
repo = 'digitaltoad/vim-pug'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

#[[plugins]]
#repo = 'cespare/vim-toml'

# Auto Linter&Fixer
[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
    let g:ale_disable_lsp = 0
    let g:ale_fix_on_save = 1
    let g:ale_javascript_prettier_use_local_config = 1
    let g:ale_sign_column_always = 1
    let g:ale_echo_msg_format = 'ALE:[%linter%] %code: %%s'
    let g:ale_sign_error = 'üí£'
    let g:ale_sign_warning = 'üö©'
    let g:ale_linters_explicit = 1 " ÂøÖË¶Å„Å™linter„ÅÆ„ÅøÊúâÂäπÂåñ„Åó„Åü„ÅÑ„Åü„ÇÅ

    " mapping
    nmap <silent> [, <Plug>(ale_previous_wrap)
    nmap <silent> ]. <Plug>(ale_next_wrap)

    "ÊúâÂäπ„Å™Linter„ÇíË®≠ÂÆö
    " - .vue(javascript)„Åßtsserver„ÅåÂãï„ÅÑ„Å°„ÇÉ„ÅÜ„ÅÆ„Åß„Ç∑„É≥„Éó„É´„Å´„Åó„Å¶„Åä„Åè
    let g:ale_linters = {
    \    'typescript': ['tsserver'],
    \    'javascript': ['eslint'],
    \    'css': ['stylelint'],
    \    'vue': ['eslint']
    \}

    " format
    let g:ale_fixers = {
    \    'javascript': ['prettier', 'eslint'],
    \    'typescript': ['prettier'],
    \    'css': ['prettier', 'stylelint'],
    \    'scss': ['prettier', 'stylelint'],
    \    '*': ['remove_trailing_lines', 'trim_whitespace']
    \}

    let g:ale_linter_aliases = {
    \    'jsx': ['css', 'html'],
    \    'vue': ['vue', 'css', 'javascript']
    \}

    " for jsx
    augroup FiletypeGroup
        autocmd!
        au BufNewFile,BufRead *.jsx set filetype=css.javascript.jsx
    augroup END
    "let g:ale_jsx_stylelint_options = '--config=.stylelintrc-jsx.json'
'''

[[plugins]]
repo = 'tbodt/deoplete-tabnine'
build = './install.sh'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
    nnoremap [ddu] <Nop>
    nmap <Leader>d [ddu]
    nnoremap <silent> [ddu]f :Ddu file<cr>
    nnoremap <silent> xdf :Ddu file_rec<cr>
    nnoremap <silent> [ddu]b :Ddu buffer<cr>
    nnoremap <silent> [ddu]c :Ddu colorscheme<cr>
    nnoremap <silent> [ddu]g <Cmd>Ddu-name=search rg -ui-param-ignoreEmpty -source-param-input=`input('Pattern: ')`<CR>
    " „Ç´„Éº„ÇΩ„É´Áä∂„ÅÆÂçòË™û„ÇíÊ§úÁ¥¢
    nnoremap <silent> [ddu]w <Cmd>call ddu#start({'name': 'grep', 'sources': [{'name': 'rg', 'params': {'input': expand('<cword>')}}]})<CR>
'''
hook_source = '''
call ddu#custom#patch_global({
    \   'ui': 'ff',
    \   'sources': [
    \      {'name': 'colorscheme'},
    \      {'name': 'buffer'},
    \      {'name': 'rg'},
    \   ],
    \   'sourceOptions': {
    \     '_': {
    \       'matchers': ['matcher_substring'],
    \     },
    \   },
    \   'sourceParams': {
    \     'rg': {
    \       'args': ['--column', '--no-heading', '--color', 'never'],
    \     },
    \   },
    \ })
call ddu#custom#patch_global({
    \   'ui': 'filer',
    \   'sources': [
    \      {'name': 'file_rec', 'params': {}},
    \      {'name': 'file'}
    \   ],
    \   'sourceOptions': {
    \     '_': {
    \       'columns': ['filename'],
    \     },
    \   },
    \   'kindOptions': {
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \   },
    \ })

if has('nvim')
  call ddu#custom#patch_global({
    \   'uiParams': {
    \     'filer': {
    \       'split': 'floating',
    \     },
    \   }
    \ })
endif

autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> i
        \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
  nnoremap <buffer><silent> p
        \ <Cmd>call ddu#ui#ff#do_action('preview')<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  inoremap <buffer><silent> <CR> <Esc><Cmd>close<CR>
  nnoremap <buffer><silent> <CR> <Cmd>close<CR>
  nnoremap <buffer><silent> q <Cmd>close<CR>
endfunction

" filer
" https://zenn.dev/shougo/articles/ddu-ui-filer
autocmd FileType ddu-filer call s:ddu_filer_my_settings()
function! s:ddu_filer_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#filer#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#filer#do_action('toggleSelectItem')<CR>
  nnoremap <buffer> o
        \ <Cmd>call ddu#ui#filer#do_action('expandItem',
        \ {'mode': 'toggle'})<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#filer#do_action('quit')<CR>
endfunction

nnoremap <buffer> >
\ <Cmd>call ddu#ui#filer#do_action('updateOptions', {
\   'sourceOptions': {
\     '_': {
\       'matchers': ToggleHidden(),
\     },
\   },
\ })<CR>

function! ToggleHidden()
  let current = ddu#custom#get_current(b:ddu_ui_name)
  let source_options = get(current, 'sourceOptions', {})
  let source_options_all = get(source_options, '_', {})
  let matchers = get(source_options_all, 'matchers', [])
  return empty(matchers) ? ['matcher_hidden'] : []
endfunction
'''


[[plugins]]
repo='Shougo/ddu-ui-ff'
[[plugins]]
repo='Shougo/ddu-ui-filer'
[[plugins]]
repo='Shougo/ddu-source-rg'
[[plugins]]
repo='Shougo/ddu-source-file_rec'
[[plugins]]
repo='Shougo/ddu-source-file'
[[plugins]]
repo='4513ECHO/ddu-source-colorscheme'
[[plugins]]
repo='shun/ddu-source-buffer'
[[plugins]]
repo='Shougo/ddu-filter-matcher_substring'
[[plugins]]
repo='Shougo/ddu-kind-file'
[[plugins]]
repo='Shougo/ddu-commands.vim'
